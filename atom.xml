<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beaven&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-06T15:05:06.018Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Beaven Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java反射机制的理解使用</title>
    <link href="http://yoursite.com/2017/07/06/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E7%9A%84%E7%90%86%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/07/06/Java反射机制的理解使用/</id>
    <published>2017-07-06T15:03:05.000Z</published>
    <updated>2017-07-06T15:05:06.018Z</updated>
    
    <content type="html"><![CDATA[<p>一、Java反射机制的理解</p>
<p>反射（Reflection）是Java语言中的一项重要功能，通过反射API可以获取程序在运行时Java类的内部结构，实现对Java代码的动态操作，在实际项目开发中其多要用于框架的构建，一般开发中较少使用，但研究理解是非常必要的。<br><a id="more"></a><br>二、Java反射机制的使用</p>
<p>反射机制的实现主要依赖于Class类和java.lang.reflect.*包中提供的类。通过这些类可以实现对象的创建，类方法的访问等。</p>
<p>（一）Class对象的获取</p>
<p>Class类的构造方法为私有方法，只能由jvm虚拟机在运行时生成，用来保存实例对象的相关信息。获得一个实例对象对应的Class对象，主要有三种方法：</p>
<ol>
<li><p>通过实例变量的getClass()方法，这种方法是获取效率最高和最安全的方式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test test = <span class="keyword">new</span> Test();</div><div class="line">Class cls = test.getClass();</div></pre></td></tr></table></figure>
</li>
<li><p>通过Class.forName()静态方法获取，这种方法是常用的一种方法，它通过输入的类名查找得到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class t = Class.forName(<span class="string">"java.lang.Thread"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>直接给出类文件的Class。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class cls = Test.class;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>（二）Class对象的使用</p>
<ol>
<li><p>构造方法的获取和使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * getConstructors可以获取声明为public的构造方法的集合，</div><div class="line"> * getDeclaredConstructors()方法获取所有的构造方法集合</div><div class="line"> */</div><div class="line">Constructor[] constructors = cls.getConstructors();</div><div class="line"><span class="comment">// 根据构造方法参数的类型获取对应的构造方法</span></div><div class="line">Constructor constructor = cls.getConstructor(String.class);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Constructor con:constructors)&#123;</div><div class="line">  <span class="comment">// 构造方法的名称</span></div><div class="line">  String name = con.getName();</div><div class="line">  <span class="comment">// 构造方法的参数类型</span></div><div class="line">  Class[] type = con.getParameterTypes();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建新的实例</span></div><div class="line">Object obj = constructor.newInstance();</div></pre></td></tr></table></figure>
</li>
<li><p>字段获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 获取public字段集合</div><div class="line"> * getDeclaredFields()获取所有的字段</div><div class="line"> */</div><div class="line">Field[] fields = cls.getFields();</div><div class="line"><span class="comment">// 字段名称</span></div><div class="line">String name = field.getName();</div><div class="line"><span class="comment">// 字段类型</span></div><div class="line">Class type = field.getType();</div><div class="line"><span class="comment">// 获取静态字段的值</span></div><div class="line">Object obj = field.get(Object);</div></pre></td></tr></table></figure>
</li>
<li><p>方法获取和执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 获取该类的所有方法，包括父类的方法</div><div class="line"> * getDeclaredMethods()获取该类的方法，不包括父类方法</div><div class="line"> */</div><div class="line">Method[] methods = cls.getMethods();</div><div class="line"><span class="comment">// 方法返回值类型</span></div><div class="line">Class retType = method.getReturnType();</div><div class="line"><span class="comment">// 方法名称</span></div><div class="line">String name = method.getName();</div><div class="line"><span class="comment">// 方法类型</span></div><div class="line">String modifiers = Modifier.toString(method.getModifiers());</div><div class="line"><span class="comment">// 方法参数类型</span></div><div class="line">Class[] paramTypes = method.getParameterTypes();</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 调用获取到的方法执行</div><div class="line"> * one:对象的实例</div><div class="line"> * two:方法参数的集合</div><div class="line"> */</div><div class="line">method.invoke(one,two);</div></pre></td></tr></table></figure>
</li>
<li><p>对类的私有域和方法的使用</p>
<p>类中的私有构造函数、方法和字段，通过相关的方法都可以获取到，但是在使用时确是禁止的，会抛出IllegalAccessException的异常。这是因为反射行为默认是受到Java访问的限制的，如果需要突破限制去访问控制，就需要调用Constructor、Method和Field的公共超类方法setAccessible()，设置为true时反射进制运行时会屏蔽Java语言的访问时检查。</p>
<p>在实际开发中，有时需要对隐藏的API进行使用时，通过这种机制就可以达到我们的目的。</p>
</li>
</ol>
<p>反射机制的功能十分强大，在运行时可以获取类的结构，分析对象，调用任意的方法。但是由于反射的运行都是在运行时，在编译器会错过很多的检查，不规范的使用反射会提高程序的出错率。而且其运行时需要遍历搜寻的特点，使得使用反射执行方法的速度要慢于直接调用方法。所以一般情况下，应根据实际情况尽量减少使用反射。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、Java反射机制的理解&lt;/p&gt;
&lt;p&gt;反射（Reflection）是Java语言中的一项重要功能，通过反射API可以获取程序在运行时Java类的内部结构，实现对Java代码的动态操作，在实际项目开发中其多要用于框架的构建，一般开发中较少使用，但研究理解是非常必要的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android使用Retrofit进行SOAP通信</title>
    <link href="http://yoursite.com/2017/06/19/Android%E4%BD%BF%E7%94%A8Retrofit%E8%BF%9B%E8%A1%8CSOAP%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/06/19/Android使用Retrofit进行SOAP通信/</id>
    <published>2017-06-19T12:43:47.000Z</published>
    <updated>2017-07-04T10:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit是当前使用最为广泛的Android网络请求框架，它可以构建不同的网络请求格式进行网络请求，使用Retrofit我们可以根据SOAP协议构建网络请求，此次记录一次完整的构建过程。<br><a id="more"></a></p>
<p>在前面的文章<a href="">在Android中使用SOAP通信</a>写了SOAP协议，其本质上是XML+HTTP，使用HTTP协议进行XML格式数据的通信。如果一个客户端向不同的后台服务器进行数据通信时，多网络框架的使用是非常不便的。</p>
<p>Retrofit是当前使用最为广泛的Android网络请求框架，它可以构建不同的网络请求格式进行网络请求，使用Retrofit我们可以根据SOAP协议构建网络请求，此次记录一次完整的构建过程。</p>
<h4 id="一、Retrofit框架引入"><a href="#一、Retrofit框架引入" class="headerlink" title="一、Retrofit框架引入"></a>一、Retrofit框架引入</h4><p>主要是Retrofit和OkHttp框架。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.okhttp3:okhttp:3.6.0'</span></div><div class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span> </div><div class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span> </div><div class="line">compile(<span class="string">'com.squareup.retrofit2:converter-simplexml:2.1.0'</span>) &#123; <span class="comment">//simplexml构建xml请求</span></div><div class="line">        exclude <span class="string">group:</span> <span class="string">'xpp3'</span>, <span class="string">module:</span> <span class="string">'xpp3'</span></div><div class="line">        exclude <span class="string">group:</span> <span class="string">'stax'</span>, <span class="string">module:</span> <span class="string">'stax-api'</span></div><div class="line">        exclude <span class="string">group:</span> <span class="string">'stax'</span>, <span class="string">module:</span> <span class="string">'stax'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="二、请求构建"><a href="#二、请求构建" class="headerlink" title="二、请求构建"></a>二、请求构建</h4><ol>
<li><p>获取SOAP请求结构</p>
<p>首先使用抓包工具对网络请求进行抓包（抓包的教程可以百度），获取数据包，然后使用postman进行数据调试。下面是我的调试成功数据：</p>
<h5 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h5><p><img src="http://oj03vlyk7.bkt.clouddn.com/a.png" alt=""></p>
<p><img src="http://oj03vlyk7.bkt.clouddn.com/b.png" alt=""></p>
<h5 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h5><p><img src="http://oj03vlyk7.bkt.clouddn.com/c.png" alt=""></p>
</li>
<li><p>使用simplexml构建请求</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 1.RequestEnvelope构建</div><div class="line">*/</div><div class="line"><span class="meta">@Root</span>(name = <span class="string">"soapenv:Envelope"</span>)</div><div class="line"><span class="meta">@NamespaceList</span>(&#123;</div><div class="line">	<span class="meta">@Namespace</span>(reference = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>, prefix = <span class="string">"xsi"</span>),</div><div class="line">	<span class="meta">@Namespace</span>(reference = <span class="string">"http://www.w3.org/2001/XMLSchema"</span>, prefix = <span class="string">"xsd"</span>),</div><div class="line">	<span class="meta">@Namespace</span>(reference = <span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>, prefix = <span class="string">"soapenv"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestEnvelope</span> </span>&#123;</div><div class="line">	<span class="meta">@Element</span>(name = <span class="string">"soapenv:Body"</span>, required = <span class="keyword">false</span>)</div><div class="line">	<span class="keyword">public</span> RequestBody requestBody;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Root</span>(name = <span class="string">"soapenv:Body"</span>, strict = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBody</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Element</span>(name = <span class="string">"GetCommand"</span>, required = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">public</span> RequestModel GetCommand;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Attribute</span>(name = <span class="string">"xmlns"</span>)</div><div class="line">    <span class="keyword">public</span> String Attribute;</div><div class="line">     </div><div class="line">    <span class="meta">@Element</span>(name = <span class="string">"E_SN"</span>, required = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">public</span> String E_SN;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  *2.ResponseEnvelope构建</div><div class="line">  */</div><div class="line"><span class="meta">@Root</span>(name = <span class="string">"soapnev:Envelope"</span>)</div><div class="line"><span class="meta">@NamespaceList</span>(&#123;</div><div class="line"><span class="meta">@Namespace</span>(reference = <span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>, prefix = <span class="string">"soapenv"</span>),</div><div class="line"><span class="meta">@Namespace</span>(reference = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>, prefix = <span class="string">"xsi"</span>),</div><div class="line"><span class="meta">@Namespace</span>(reference = <span class="string">"http://www.w3.org/2001/XMLSchema"</span>, prefix = <span class="string">"xsd"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseEnvelope</span> </span>&#123;</div><div class="line">  </div><div class="line"><span class="meta">@Element</span>(name = <span class="string">"Body"</span>)</div><div class="line"><span class="keyword">public</span> ResponseBody responseBody;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Root</span>(name = <span class="string">"Body"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseBody</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Element</span>(name = <span class="string">"GetCommandResponse"</span>,required = <span class="keyword">false</span>)</div><div class="line">   	<span class="keyword">public</span> GetCommandResponse getCommandResponse;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Root</span>(name = <span class="string">"GetCommandResponse"</span>)</div><div class="line"><span class="meta">@Attribute</span>(name = <span class="string">"xmlns"</span>,empty = <span class="string">"http://mobiletone.cn/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetCommandResponse</span> </span>&#123;</div><div class="line"></div><div class="line">   	<span class="meta">@Element</span>(name = <span class="string">"GetCommandResult"</span>,required = <span class="keyword">false</span>)</div><div class="line">   	<span class="keyword">public</span> String GetCommandResult;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 3.API接口编写</div><div class="line"> */</div><div class="line"><span class="meta">@Headers</span>(&#123;</div><div class="line">	<span class="string">"Content-Type:text/xml;charset=utf-8"</span>,</div><div class="line">	<span class="string">"SOAPAction:http://*********"</span></div><div class="line">&#125;)</div><div class="line"><span class="meta">@POST</span>(<span class="string">"WEBSERVICE/Services.asmx"</span>)</div><div class="line"><span class="function">Observable&lt;ResponseEnvelope&gt; <span class="title">getCommand</span><span class="params">(@Body RequestEnvelope requestEnvelope)</span></span>;</div></pre></td></tr></table></figure>
<p>PS : 在构建RequestEnvelope时，不同的SOAP协议版本（该次请求是VER11）@NamespaceList头部是有差异的，需要根据调试信息调整。</p>
</li>
<li><p>发送请求，并解析返回值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">   * 1.Retrofit初始化</div><div class="line">   */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.Builder okHttpBuilder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line"></div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"*********"</span>;</div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> Strategy strategy = <span class="keyword">new</span> AnnotationStrategy();</div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> Serializer serializer = <span class="keyword">new</span> Persister(strategy);</div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> ServerRequest serviceRequest;</div><div class="line"></div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> Retrofit.Builder retrofitBuilder = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">   			.addConverterFactory(SimpleXmlConverterFactory.create(serializer))</div><div class="line">   			.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">   			.baseUrl(BASE_URL);</div><div class="line"></div><div class="line">   	<span class="keyword">private</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">S <span class="title">createRetrofit</span><span class="params">(Class&lt;S&gt; cls)</span> </span>&#123;</div><div class="line">   		okHttpBuilder.interceptors().add(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">   			<span class="meta">@Override</span></div><div class="line">   			<span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">   				Request original = chain.request();</div><div class="line"></div><div class="line">   				Request.Builder requestBuilder = original.newBuilder()</div><div class="line">   						.header(<span class="string">"Content-Type"</span>, <span class="string">"text/xml;charset=UTF-8"</span>)</div><div class="line">   						.method(original.method(), original.body());</div><div class="line"></div><div class="line">   				Request request = requestBuilder.build();</div><div class="line">   				<span class="keyword">return</span> chain.proceed(request);</div><div class="line">   			&#125;</div><div class="line">   		&#125;);</div><div class="line"></div><div class="line">   		OkHttpClient client = okHttpBuilder.connectTimeout(<span class="number">2</span>, TimeUnit.MINUTES)</div><div class="line">   				.writeTimeout(<span class="number">2</span>, TimeUnit.MINUTES)</div><div class="line">   				.readTimeout(<span class="number">2</span>, TimeUnit.MINUTES)</div><div class="line">   				.build();</div><div class="line">   		Retrofit retrofit = retrofitBuilder.client(client).build();</div><div class="line">   		<span class="keyword">return</span> retrofit.create(cls);</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServerRequest <span class="title">getServiceStore</span><span class="params">()</span> </span>&#123;</div><div class="line">   		<span class="keyword">if</span> (serviceRequest == <span class="keyword">null</span>) &#123;</div><div class="line">   			serviceRequest = createRetrofit(ServerRequest.class);</div><div class="line">   		&#125;</div><div class="line">   		<span class="keyword">return</span> serviceRequest;</div><div class="line">   	&#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">   * 2.参数填写</div><div class="line">   */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestConstruct</span> </span>&#123;</div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;ResponseEnvelope&gt; <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</div><div class="line">   		RequestEnvelope requestEnvelop = <span class="keyword">new</span> RequestEnvelope();</div><div class="line">   		RequestBody requestBody = <span class="keyword">new</span> RequestBody();</div><div class="line">   		RequestModel requestModel = <span class="keyword">new</span> RequestModel();</div><div class="line">   		requestModel.Attribute = NAME_SPACE;</div><div class="line">   		requestModel.E_SN = IConfig.E_SN_VALUE;</div><div class="line">   		requestBody.GetCommand = requestModel;</div><div class="line">   		requestEnvelop.requestBody = requestBody;</div><div class="line">   		<span class="keyword">return</span> RetrofitGenerator.getServiceStore().getCommand(requestEnvelop);</div><div class="line">   	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">   * 3.订阅获取返回值</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">()</span></span>&#123;</div><div class="line">     RequestConstruct.getCommand().subscribeOn(Schedulers.io())</div><div class="line">       .observeOn(AndroidSchedulers.mainThread())</div><div class="line">       .subscribe(<span class="keyword">new</span> Action1&lt;ResponseEnvelope&gt;() &#123;</div><div class="line">   		<span class="meta">@Override</span></div><div class="line">   		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(ResponseEnvelope responseEnvelope)</span> </span>&#123;</div><div class="line">             String result =responseEnvelope.responseBody.getCommandResponse.GetCommandResult;</div><div class="line">   		&#125;</div><div class="line">   	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Retrofit是当前使用最为广泛的Android网络请求框架，它可以构建不同的网络请求格式进行网络请求，使用Retrofit我们可以根据SOAP协议构建网络请求，此次记录一次完整的构建过程。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android使用ksoap2与WebService通信</title>
    <link href="http://yoursite.com/2017/06/15/Android%E4%BD%BF%E7%94%A8ksoap2%E4%B8%8EWebService%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/06/15/Android使用ksoap2与WebService通信/</id>
    <published>2017-06-15T08:19:37.000Z</published>
    <updated>2017-07-04T10:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、WebService和SOAP介绍"><a href="#一、WebService和SOAP介绍" class="headerlink" title="一、WebService和SOAP介绍"></a>一、WebService和SOAP介绍</h4><p>​    WebService是一种基于SOAP协议的远程调用标准，是跨平台的，可以在不同语言中使用的。WebServie使用XML用来编解码数据，并使用SOAP来传输数据。</p>
<p>​    SOAP是基于XML的简易协议，使用XML进行编码，使用HTTP进行数据的交互，它是一种用于网络服务的协议，独立于平台，独立于语言。在Android  SDK中没有提供与WebService通信的库，所以我们需要使用第三方类库（KSOAP2）建立SOAP客户端与WebService通信。<br><a id="more"></a></p>
<h4 id="二、KSOAP2的使用"><a href="#二、KSOAP2的使用" class="headerlink" title="二、KSOAP2的使用"></a>二、KSOAP2的使用</h4><ol>
<li><a href="http://simpligility.github.io/ksoap2-android/index.html" target="_blank" rel="external">ksoap2官网</a>        <a href="https://github.com/simpligility/ksoap2-android" target="_blank" rel="external">ksoap2源码</a>        <a href="http://www.runoob.com/webservices/webservices-tutorial.html" target="_blank" rel="external">WebService教程</a>         <a href="http://www.runoob.com/soap/soap-tutorial.html" target="_blank" rel="external">SOAP教程</a></li>
<li>ksoap2步骤</li>
</ol>
<ul>
<li>使用WebService的命名空间和调用的方法名构成SoapObject:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SoapObject request = <span class="keyword">new</span> Soapobject(nameSpace,method);</div></pre></td></tr></table></figure>
<ul>
<li>设置调用方法的参数（可选）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.addProperty(<span class="string">"param"</span>,<span class="string">"value"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>构建SOAP请求体：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SoapSerializationEnvelope envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</div><div class="line">envelope.bodyOut = request();<span class="comment">//SoapObject对象</span></div><div class="line">envelope.dotNet = <span class="keyword">true</span>;<span class="comment">//是否是.NET WebService</span></div></pre></td></tr></table></figure>
<p>​    SoapEnvelope.VER11为SOAP协议的版本号，该版本号根据服务端WebService的版本号设置，现在有VER10，VER11，VER12。</p>
<ul>
<li>创建HttpTransportSE对象并调用。通过HttpTransportSE类的构造方法可以指定WebService的URL：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpTransportSE transport = <span class="keyword">new</span> HttpTransportSE(request.getURL(), out_times);</div><div class="line">transport.call(request.getSoapAction(), envelope); <span class="comment">//call方法调用WebService</span></div></pre></td></tr></table></figure>
<ul>
<li>得到返回值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SoapObject soapObject = (SoapObject) envelope.getResponse();</div></pre></td></tr></table></figure>
<p>下面是简单封装的ksoap调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoapSend</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">SoapResponse</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SoapRequest soapRequest;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoapSend</span><span class="params">(SoapRequest soapRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.soapRequest = soapRequest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SoapResponse <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object result = sendSoap(soapRequest);</div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result <span class="keyword">instanceof</span> SoapObject) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SoapResponse(result);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">sendSoap</span><span class="params">(SoapRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SoapSerializationEnvelope envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</div><div class="line">            envelope.bodyOut = request.getParameters();</div><div class="line">            envelope.dotNet = <span class="keyword">true</span>;</div><div class="line">            envelope.setOutputSoapObject(request.getParameters());</div><div class="line">            <span class="keyword">new</span> MarshalBase64().register(envelope);</div><div class="line">            <span class="keyword">int</span> out_times = <span class="number">20000</span>;</div><div class="line">            HttpTransportSE transport = <span class="keyword">new</span> HttpTransportSE(request.getURL(), out_times);</div><div class="line">            transport.call(request.getSoapAction(), envelope);</div><div class="line">            <span class="keyword">return</span> envelope.getResponse();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException | XmlPullParserException e) &#123;</div><div class="line">            soapRequest.onNetError(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoapRequest</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String URL;</div><div class="line">    <span class="keyword">private</span> String nameSpace;</div><div class="line">    <span class="keyword">private</span> String methodName;</div><div class="line">    <span class="keyword">private</span> String soapAction;</div><div class="line">    <span class="keyword">private</span> SoapObject parameters;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onNetError</span><span class="params">(Exception e)</span></span>;</div><div class="line">    <span class="keyword">private</span> ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SoapRequest</span><span class="params">(String URL, String nameSpace, String methodName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.URL = URL;</div><div class="line">        <span class="keyword">this</span>.nameSpace = nameSpace;</div><div class="line">        <span class="keyword">this</span>.methodName = methodName;</div><div class="line">        <span class="keyword">this</span>.soapAction = nameSpace + methodName;</div><div class="line"></div><div class="line">        parameters = <span class="keyword">new</span> SoapObject(nameSpace, methodName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addParameter</span><span class="params">(String name, <span class="keyword">boolean</span> value)</span> </span>&#123;</div><div class="line">        addParameter(name, String.valueOf(value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addParameter</span><span class="params">(String name, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        addParameter(name, String.valueOf(value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addParameter</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        parameters.addProperty(name, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SoapObject <span class="title">getParameters</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> parameters;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSoapAction</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> soapAction;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getURL</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> URL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SoapResponse <span class="title">sendRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FutureTask&lt;SoapResponse&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> SoapSend(<span class="keyword">this</span>));</div><div class="line">            executorService.submit(futureTask);</div><div class="line">            <span class="keyword">return</span> futureTask.get();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、WebService和SOAP介绍&quot;&gt;&lt;a href=&quot;#一、WebService和SOAP介绍&quot; class=&quot;headerlink&quot; title=&quot;一、WebService和SOAP介绍&quot;&gt;&lt;/a&gt;一、WebService和SOAP介绍&lt;/h4&gt;&lt;p&gt;​    WebService是一种基于SOAP协议的远程调用标准，是跨平台的，可以在不同语言中使用的。WebServie使用XML用来编解码数据，并使用SOAP来传输数据。&lt;/p&gt;
&lt;p&gt;​    SOAP是基于XML的简易协议，使用XML进行编码，使用HTTP进行数据的交互，它是一种用于网络服务的协议，独立于平台，独立于语言。在Android  SDK中没有提供与WebService通信的库，所以我们需要使用第三方类库（KSOAP2）建立SOAP客户端与WebService通信。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java阻塞队列的使用</title>
    <link href="http://yoursite.com/2017/05/21/Java%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/21/Java阻塞队列的使用/</id>
    <published>2017-05-21T14:29:38.000Z</published>
    <updated>2017-07-04T10:41:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的阻塞队列的学习使用。<br><a id="more"></a></p>
<p>一、阻塞队列介绍(BlockingQueue)</p>
<p>1.BlockingQueue是一种支持两个附加操作的队列，这两个操作是：</p>
<p>(1)获取元素的操作会在队列为空时进行等待，直至队列为非空时继续；<br>(2)存储元素的操作会在队列满时进行等待，直至队列出现可用空间时继续。</p>
<p>2.BlockingQueue的方法以四种形式出现：</p>
<p> BlockingQueue不能够存入null元素，会抛出NullPointerException异常，null 被用作指示 poll 操作失败的警戒值。</p>
<p><img src="http://img.blog.csdn.net/20161018215313866" alt=""></p>
<p>3.BlockingQueue主要用于实现生产者-消费者模式，生产者线程向队列容器中添加元素，消费者线程从队列中取出元素。BlockingQueue实现是线程安全的，所有排队方法都可以使用内部锁或其他形式的并发控制来自动达到它们的目的。</p>
<p>二、BlockingQueue的常见实现类</p>
<p>1.ArrayBlockingQueue一个由数组结构组成的有界阻塞队列，遵循“先进先出”原则对元素进行排序。队列空间的大小固定，一旦创建以后就不可以再增加容量。试图向 已满队列中放入元素会导致操作受阻塞；试图从空队列中提取元素将导致类似阻塞。</p>
<p>默认情况下不保证对访问者的公平访问队列，即先阻塞的线程先访问。但是可以通过构造方法中设置fairness（公平性）属性为true，创建公平的访问队列。公平性会对性能产生影响，但也减少了可变性和不平衡性。</p>
<p>​    ArrayBlockingQueue mArrayBlockingQueue = new ArrayBlockingQueue(10,true);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;String&gt; mArrayBlockingQueue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">10</span>,<span class="keyword">true</span>);</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer()).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer()).start();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    mArrayBlockingQueue.put(<span class="string">"数据:"</span>+i);</div><div class="line">                    <span class="comment">//若队列空间已满，会进入阻塞状态</span></div><div class="line">                    Thread.sleep(<span class="number">20000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(mArrayBlockingQueue.take());</div><div class="line">                    <span class="comment">//当队列为空时，会进入阻塞状态</span></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.LinkedBlockingQueue</p>
<p>一个基于链表的阻塞队列，其实现的队列可以不指定队列大小，默认是Integer.MAX_VALUE。<br>其实现队列中的锁是分离的，生产者和消费者可以并行的操作队列中的数据，从而使得并发执行数据的效率更高。实现方式和ArrayBlockingQueue 基本一致。</p>
<p>3.PriorityBlockingQueue</p>
<p>一种优先级队列，队列中的元素按照优先级排列。队列中存储的对象必须实现Comparable接口，确定对象的优先级。<br>其比较规则：<br>（1）当前对象和其他对象比较，如果如果compare方法返回-1，那么其优先级高于比较的对象。<br>（2）compare方法返回0，则两个优先级相等。<br>（3）compare方法返回1，则优先级低于比较的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPriority</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">CommandPriority</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Command command;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandPriority</span><span class="params">(Command command, <span class="keyword">int</span> priority)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">        <span class="keyword">this</span>.priority = priority;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> command;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"CommandPriority&#123;"</span> +</div><div class="line">                <span class="string">"command="</span> + command +</div><div class="line">                <span class="string">", priority="</span> + priority +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(@NonNull CommandPriority o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.priority &gt; o.priority) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.priority &lt; o.priority) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 4.SynchronousQueue</p>
<p>一个没有数据缓冲的队列，生产者对其的插入操作put后进入阻塞状态直至消费者执行take操作后才执行下一次操作，反之亦然；它的内部由于没有数据缓存空间，所以不能使用peek来查看队列中是否存在元素，其返回值永远为null。</p>
<p>5.DelayQueue</p>
<p>一个无界的阻塞队列，队列中的元素需要实现Delayed接口，Delayed接口继承Comparable接口，其元素存入队列时需要进行比较，比较的基准为延时的时间值，它是一种内部由PriorityQueue实现的变体。队列中的元素在到期时才能从队列中取出，对头的元素是最紧急任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JAVA编程思想中的例子</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayedTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Delayed</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> current = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id = current++;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> detail;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> trigger;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> List&lt;DelayedTask&gt; sequence = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DelayedTask</span><span class="params">(<span class="keyword">int</span> delayedInMillisecond)</span> </span>&#123;</div><div class="line">            detail = delayedInMillisecond;</div><div class="line">            trigger = System.nanoTime() + NANOSECONDS.convert(detail, MILLISECONDS);</div><div class="line">            sequence.add(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="keyword">this</span> + <span class="string">"aa"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</div><div class="line">            <span class="comment">//获取剩余延长时间</span></div><div class="line">            <span class="keyword">return</span> unit.convert(trigger - System.nanoTime(), NANOSECONDS);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</div><div class="line">            <span class="comment">//进行比较</span></div><div class="line">            DelayedTask that = (DelayedTask) o;</div><div class="line">            <span class="keyword">if</span> (trigger &lt; that.trigger) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (trigger &gt; that.trigger) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中的阻塞队列的学习使用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android中LruCache实现分析</title>
    <link href="http://yoursite.com/2017/04/22/Android%E4%B8%ADLruCache%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/22/Android中LruCache实现分析/</id>
    <published>2017-04-22T05:49:58.000Z</published>
    <updated>2017-07-04T10:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在手机应用开发中，为了保存数据访问的流畅性和降低网络流量的消耗，缓存是我们经常需要使用到的。而缓存的实现有多种方式，如LFU（最少的使用）、LRU（最不经常的使用）等。LRU算法是我们开发中经常使用的一种方式，本篇主要分许Android官方提供的LruCache的实现方式 。<br><a id="more"></a></p>
<h4 id="Lru介绍"><a href="#Lru介绍" class="headerlink" title="Lru介绍"></a>Lru介绍</h4><ul>
<li>Lru是一种常见的缓存算法，其实现原理是当缓存数据量超过规定的范围时，就把最早存入的数据删除，确保缓存数量在规定的范围内。</li>
<li>在Java语言中Lru缓存算法的实现一般有两种，一种是使用LinkedHashMap实现，一种是自己设计使用链表+HashMap实现。</li>
</ul>
<h4 id="Androiod中LruChche的实现"><a href="#Androiod中LruChche的实现" class="headerlink" title="Androiod中LruChche的实现"></a>Androiod中LruChche的实现</h4><p>在Android中已经对LruCache添加了实现类，可以方便的实现Lru缓存。这里就不介绍关于LruCahe的使用，主要是对Android官方的LruCache实现的分析。</p>
<ol>
<li>Android官方提供的LruCache的底层实现是基于LinkedHashMap来实现的。LinkedHashMap是继承自HashMap类，所以都是存储键值对的结构，同时LinkedHashMap加入了双向循环链表，可以保存节点的插入顺序，这提供了Lru实现的基础。</li>
<li><p>LruCache的构造，LruCache只提供了一个传入容量值的的构造函数，函数中初始化LinkedHashMap指定元素按照访问顺序排序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数中传入缓存容量值</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maxSize &lt;= 0"</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">this</span>.maxSize = maxSize;</div><div class="line">       <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);<span class="comment">//指定按照访问顺序排序</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>LruCache的put操作，调用map的put方法存入数据，同时执行缓存清理方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">   	<span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</div><div class="line">     		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null || value == null"</span>);</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	V previous;</div><div class="line">   	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123; <span class="comment">//同步操作</span></div><div class="line">     	 putCount++;</div><div class="line">     	 size += safeSizeOf(key, value);<span class="comment">//记录当前存储的数据数量</span></div><div class="line">     	 previous = map.put(key, value);<span class="comment">//执行map的put操作获取</span></div><div class="line">     	 <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">      	  size -= safeSizeOf(key, value);</div><div class="line">     	 &#125;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">     	  entryRemoved(<span class="keyword">false</span>, key, previous, value);</div><div class="line">   	&#125;</div><div class="line">   	trimToSize(maxSize);<span class="comment">//清理超出容器的数据项</span></div><div class="line">   	<span class="keyword">return</span> previous;</div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>LruCache的get操作，根据key取值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">   	<span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</div><div class="line">     		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">       * 执行map.get()方法，如果获取到值直接返回。</div><div class="line">       * /</div><div class="line">   	V mapValue;</div><div class="line">   	synchronized (this) &#123;</div><div class="line">     		mapValue = map.get(key);</div><div class="line">     		if (mapValue != null) &#123;</div><div class="line">       		hitCount++;</div><div class="line">       		return mapValue;</div><div class="line">     		&#125;</div><div class="line">     	missCount++;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	/**</div><div class="line">    	* 在没有获取到值时，会尝试创建一个值，但可能需要较长的时间，而且当创建完成后map可能发生变化。</div><div class="line">    	* 如果当create()正在执行时，一个冲突的值添加进map，我们将该值留在map中并释放所创建的值。</div><div class="line">    	*/</div><div class="line">   	V createdValue = create(key);<span class="comment">//创建操作</span></div><div class="line">   	<span class="keyword">if</span> (createdValue == <span class="keyword">null</span>) &#123;</div><div class="line">     		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">     		createCount++;</div><div class="line">     		mapValue = map.put(key, createdValue);</div><div class="line"></div><div class="line">     		<span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">       		<span class="comment">//冲突，不做最后的put</span></div><div class="line">       		map.put(key, mapValue);</div><div class="line">     		&#125; <span class="keyword">else</span> &#123;</div><div class="line">       		size += safeSizeOf(key, createdValue);</div><div class="line">     		&#125;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">     		entryRemoved(<span class="keyword">false</span>, key, createdValue, mapValue);</div><div class="line">     		<span class="keyword">return</span> mapValue;</div><div class="line">   	&#125; <span class="keyword">else</span> &#123;</div><div class="line">     		trimToSize(maxSize); <span class="comment">//如果创建了新的值，同样执行缓存清理方法。</span></div><div class="line">     		<span class="keyword">return</span> createdValue;</div><div class="line">   	&#125;</div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>remove操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   *根据key移除数据项</div><div class="line">   *<span class="doctag">@return</span> 通过key得到的先前的value值</div><div class="line">   */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">   	<span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</div><div class="line">     		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"key == null"</span>);</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	V previous;</div><div class="line">   	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">     		previous = map.remove(key);<span class="comment">//remove操作</span></div><div class="line">     		<span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">       		size -= safeSizeOf(key, previous);</div><div class="line">     		&#125;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">     		entryRemoved(<span class="keyword">false</span>, key, previous, <span class="keyword">null</span>);</div><div class="line">   	&#125;</div><div class="line">   	<span class="keyword">return</span> previous;</div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>缓存清理方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">   	<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;<span class="comment">//循环操作</span></div><div class="line">     	 K key;</div><div class="line">     	 V value;</div><div class="line">     	 <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">       	<span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</div><div class="line">         		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName()</div><div class="line">             	+ <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</div><div class="line">       	&#125;</div><div class="line">       	<span class="keyword">if</span> (size &lt;= maxSize || map.isEmpty()) &#123;</div><div class="line">         		<span class="keyword">break</span>;<span class="comment">//在当前存储数据项小于规定容量或者map为空时，停止循环。</span></div><div class="line">       	&#125;</div><div class="line">           <span class="comment">//删除元素</span></div><div class="line">       	Map.Entry&lt;K, V&gt; toEvict = map.entrySet().iterator().next();</div><div class="line">       	key = toEvict.getKey();</div><div class="line">       	value = toEvict.getValue();</div><div class="line">       	map.remove(key);</div><div class="line">       	size -= safeSizeOf(key, value);</div><div class="line">       	evictionCount++;</div><div class="line">     	 &#125;</div><div class="line">     	 entryRemoved(<span class="keyword">true</span>, key, value, <span class="keyword">null</span>);</div><div class="line">   	&#125;</div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Android官方提供在android.util包中的LruCache的实现非常简单，其在底层建立LinkedHashMap，并通过制定accessOrder为true，即按照访问顺序来排序。这样进行put和get操作时将会把最近操作的数据项Entry放入双向链表的后面，从而保证了在清除超出规定范围的数据项时，删除的最前面的的就是当前最少使用的数据项。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在手机应用开发中，为了保存数据访问的流畅性和降低网络流量的消耗，缓存是我们经常需要使用到的。而缓存的实现有多种方式，如LFU（最少的使用）、LRU（最不经常的使用）等。LRU算法是我们开发中经常使用的一种方式，本篇主要分许Android官方提供的LruCache的实现方式 。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebView重定向返回问题解决</title>
    <link href="http://yoursite.com/2017/04/10/WebView%E9%87%8D%E5%AE%9A%E5%90%91%E8%BF%94%E5%9B%9E%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2017/04/10/WebView重定向返回问题解决/</id>
    <published>2017-04-10T06:31:26.000Z</published>
    <updated>2017-07-04T10:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    在Android中使用WebView加载网页时，会遇到网页的重定向问题，此时调用WebView的goBack方法返回时无法回退，通过查阅资料发现两种方式可以实现重定向下的网页回退，测试都可以使用。<br><a id="more"></a></p>
<h4 id="一、使用WebView的getHitTestResult方法"><a href="#一、使用WebView的getHitTestResult方法" class="headerlink" title="一、使用WebView的getHitTestResult方法"></a>一、使用WebView的getHitTestResult方法</h4><p>​    WebView提供了一个getHitTestResult()方法，该方法返回值为WebView.HitTestResult类型，通过对返回值的getType()或getExtra()方法获取的值进行判断，确定网页的重定向。具体实现：<a href="http://blog.csdn.net/qq_33689414/article/details/51111541" target="_blank" rel="external">此方法参考</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (view.getHitTestResult().getType() == WebView.HitTestResult.UNKNOWN_TYPE) &#123;</div><div class="line">		view.loadUrl(url);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, url);</div></pre></td></tr></table></figure>
<h4 id="二、设置shouldOverrideUrlLoading返回值为false"><a href="#二、设置shouldOverrideUrlLoading返回值为false" class="headerlink" title="二、设置shouldOverrideUrlLoading返回值为false"></a>二、设置shouldOverrideUrlLoading返回值为false</h4><p>​    shouldOverrideUrlLoading()方法是用来处理WebView加载url地址的方法，返回值为false表示由WebView来处理url地址的加载，返回值为true则表示由编写的程序控制url加载的处理。</p>
<p>​    通过设置返回值为false由WebView控制url的加载可以解决重定向后的返回问题，不过在对于需要控制url的加载时不方便，需要根据实际使用确定使用哪种方法。</p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    在Android中使用WebView加载网页时，会遇到网页的重定向问题，此时调用WebView的goBack方法返回时无法回退，通过查阅资料发现两种方式可以实现重定向下的网页回退，测试都可以使用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java类初始化</title>
    <link href="http://yoursite.com/2017/03/23/Java%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2017/03/23/Java类初始化/</id>
    <published>2017-03-23T06:03:48.000Z</published>
    <updated>2017-07-04T10:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java类初始化顺序。<br><a id="more"></a></p>
<p><strong>无继承情况</strong></p>
<ol>
<li>静态初始化块和静态数据按定义的先后顺序，注意：如果静态初始化块中要调用定义的静态数据，则静态数据必须在静态初始化块之前定义。并且只在首次加载类时运行一次。</li>
<li>普通成员变量</li>
<li>实例初始化块 －－－ 每次创建对象运行一次</li>
<li>构造函数</li>
</ol>
<p><strong>有继承情况</strong></p>
<ol>
<li>父类静态初始化块和静态数据按定义的先后顺序，注意：如果静态初始化块中要调用定义的静态数据，则静态数据必须在静态初始化块之前定义。</li>
<li>子类静态初始化块和静态数据按定义的先后顺序，注意同上。<br>＝＝＝ 注意：步骤 1 和 2 只在首次加载类时运行一次 ＝＝＝</li>
<li>父类普通成员变量</li>
<li>父类实例初始化块</li>
<li>父类构造函数</li>
<li>子类普通成员变量</li>
<li>子类实例初始化块</li>
<li>子类构造函数<br>＝＝＝ 注意：步骤 4 和 7 每次创建对象时执行一次 ＝＝＝<br>这个问题警示我们不要在构造函数中调用子类重写的方法。因为父类构造函数初始化时，子类成员变量还没有完成初始化，所以调用可能存在问题。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java类初始化顺序。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android动画资源学习</title>
    <link href="http://yoursite.com/2017/03/07/Android%E5%8A%A8%E7%94%BB%E8%B5%84%E6%BA%90%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/07/Android动画资源学习/</id>
    <published>2017-03-07T13:44:49.000Z</published>
    <updated>2017-07-04T10:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android动画分为三种：属性动画，补间动画，帧动画。本篇文章是对Android官方文档中关于动画资源一文的翻译学习，介绍了三种动画资源的的相关属性，xml的编写和引用。<br><a id="more"></a></p>
<p>动画资源的定义分为两种动画：</p>
<h5 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h5><p>动画制作者可以通过在设置的时间内修改对象的属性值来创建一个动画。</p>
<h5 id="视图动画"><a href="#视图动画" class="headerlink" title="视图动画"></a>视图动画</h5><p>可以使用视图动画框架执行两种类型的动画：</p>
<ul>
<li><p>补间动画</p>
<p>通过对单一图像执行一系列变换从而产生动画效果。</p>
</li>
<li><p>帧动画</p>
<p>通过按顺序展示连续的图片产生动画效果。</p>
</li>
</ul>
<h4 id="属性动画-1"><a href="#属性动画-1" class="headerlink" title="属性动画"></a>属性动画</h4><hr>
<p>在一定的时间内修改目标对象的属性产生动画的xml文件，例如背景颜色或者alpah值。</p>
<h5 id="文件位置："><a href="#文件位置：" class="headerlink" title="文件位置："></a>文件位置：</h5><p>res/animator/filename.xml</p>
<p>这个文件名将作为资源id被使用。</p>
<h5 id="编译资源数据类型："><a href="#编译资源数据类型：" class="headerlink" title="编译资源数据类型："></a>编译资源数据类型：</h5><p>ValueAnimator, ObjectAnimator, AnimatorSet</p>
<h5 id="资源引用："><a href="#资源引用：" class="headerlink" title="资源引用："></a>资源引用：</h5><p>In Java:R.animator.filename<br>In XML:@[package:]animator/filename</p>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span></span></div><div class="line">  <span class="attr">android:ordering</span>=<span class="string">[</span>"<span class="attr">together</span>" | "<span class="attr">sequentially</span>"]&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">        <span class="attr">android:propertyName</span>=<span class="string">"string"</span> </div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"int"</span> </div><div class="line">        <span class="attr">android:valueFrom</span>=<span class="string">"float | int | color"</span> </div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"float | int | color"</span> </div><div class="line">        <span class="attr">android:startOffset</span>=<span class="string">"int"</span>  </div><div class="line">        <span class="attr">android:repeatCount</span>=<span class="string">"int"</span></div><div class="line">        <span class="attr">android:repeatMode</span>=<span class="string">[</span>"<span class="attr">repeat</span>" | "<span class="attr">reverse</span>"] </div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">[</span>"<span class="attr">intType</span>" | "<span class="attr">floatType</span>"]/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">animator</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"int"</span></div><div class="line">        <span class="attr">android:valueFrom</span>=<span class="string">"float | int | color"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"float | int | color"</span></div><div class="line">        <span class="attr">android:startOffset</span>=<span class="string">"int"</span></div><div class="line">        <span class="attr">android:repeatCount</span>=<span class="string">"int"</span></div><div class="line">        <span class="attr">android:repeatMode</span>=<span class="string">[</span>"<span class="attr">repeat</span>" | "<span class="attr">reverse</span>"]</div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">[</span>"<span class="attr">intType</span>" | "<span class="attr">floatType</span>"]/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>文件必须有一个唯一的根元素:set,objectAnmiator,valueAnimator三者中的一个。可以在set标签内部将动画元素组合在一起，包括其他的set元素。</p>
<h5 id="元素："><a href="#元素：" class="headerlink" title="元素："></a>元素：</h5><ul>
<li><p>set：保存其他动画元素的容器（objectAnimator,valueAnimator,set）.</p>
<p>您可以指定嵌套的set标签以进一步将动画分组在一起。每个set标签可以定义自己的属性顺序。</p>
<p>属性：</p>
<p>android:ordering</p>
<p>关键词，指定集合中动画的播放顺序。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>sequentially</td>
<td>按顺序播放</td>
</tr>
<tr>
<td>together (default)</td>
<td>同时播放</td>
</tr>
</tbody>
</table>
<ul>
<li><p>objectAnimator:在特定时间内动画对象的特定属性。</p>
<p>属性：</p>
<p>android:propertyName</p>
<p>String类型，必须属性。通过名称引用对象的属性动画,例如你可以为一个view对象指定”alpha”或“backgroundColor”.然而，objectAnimator元素不会暴露目标属性，因此无法在XML声明中将对象设置为动画。为了设置包含此属性的目标对象，必须通过调用loadAnimator()和setTarget()方法使用定义的xml动画资源。</p>
<p>android:valueTo</p>
<p>float, int,color类型，必须属性。动画属性结束的值，颜色表示为6为16进制数字（#333333）。</p>
<p>android:valueFrom</p>
<p>float, int,color类型。动画属性开始的值。 如果未指定，动画将从属性的get方法获取的值开始。 颜色表示为六位十六进制数字（＃333333）。</p>
<p>android:duration</p>
<p>int类型。动画的时间（以毫秒为单位）。 默认为300毫秒。</p>
<p>android:startOffset</p>
<p>int类型，调用start()方法后动画的延迟毫秒数。</p>
<p>android:repeatCount</p>
<p>int类型。动画的重复次数。设置为“-1”，进行无限重复，或到一个正整数为止。例如，值为“1”表示动画在初始化运行后再重复一次，也就是动画总共执行了两次。默认值为“0”，表示不重复。</p>
<p>android:repeatMode</p>
<p>int类型。动画从开始到结束的形式。android：repeatCount必须设置为正整数或“-1”，此属性才有效果。设置为“反向”以使动画与每次迭代的方向相反，或者“重复”使动画从开始每次循环。</p>
<p>android:valueType</p>
<p>关键词。如果值是颜色，请不要指定此属性。 动画框架自动处理颜色值。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>intType</td>
<td>指定动画值为整数</td>
</tr>
<tr>
<td>floatType (default)</td>
<td>指定动画值为float</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">android:ordering</span>=<span class="string">"sequentially"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">            <span class="attr">android:propertyName</span>=<span class="string">"x"</span></div><div class="line">            <span class="attr">android:duration</span>=<span class="string">"500"</span></div><div class="line">            <span class="attr">android:valueTo</span>=<span class="string">"400"</span></div><div class="line">            <span class="attr">android:valueType</span>=<span class="string">"intType"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">            <span class="attr">android:propertyName</span>=<span class="string">"y"</span></div><div class="line">            <span class="attr">android:duration</span>=<span class="string">"500"</span></div><div class="line">            <span class="attr">android:valueTo</span>=<span class="string">"300"</span></div><div class="line">            <span class="attr">android:valueType</span>=<span class="string">"intType"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"500"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"1f"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了运行此动画，您必须将代码中的XML资源扩充为AnimatorSet对象，然后在开始动画集之前为所有动画设置目标对象。 为方便起见，调用setTarget（）为AnimatorSet的所有子项设置单个目标对象。 以下代码显示了如何执行此操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</div><div class="line">    R.anim.property_animator);</div><div class="line">set.setTarget(myObject);</div><div class="line">set.start();</div></pre></td></tr></table></figure>
<h4 id="视图动画-1"><a href="#视图动画-1" class="headerlink" title="视图动画"></a>视图动画</h4><hr>
<p>视图动画框架支持补间动画和帧动画，它们都可以在XML中声明。 下面介绍如何使用这两种方法。</p>
<h5 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h5><p>在xml文件中定义用于执行图像的旋转、淡化、位移、和拉伸的动画。</p>
<h5 id="文件位置：-1"><a href="#文件位置：-1" class="headerlink" title="文件位置："></a>文件位置：</h5><p>res/anim/filename.xml</p>
<p>文件名称用于资源id</p>
<h5 id="编译资源数据类型：-1"><a href="#编译资源数据类型：-1" class="headerlink" title="编译资源数据类型："></a>编译资源数据类型：</h5><p>Resource pointer to an Animation</p>
<h5 id="资源引用：-1"><a href="#资源引用：-1" class="headerlink" title="资源引用："></a>资源引用：</h5><p>In Java:R.animator.filename<br>In XML:@[package:]animator/filename</p>
<h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:interpolator</span>=<span class="string">"@[package:]anim/interpolator_resource"</span></div><div class="line">    <span class="attr">android:shareInterpolator</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></div><div class="line">        <span class="attr">android:fromAlpha</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:toAlpha</span>=<span class="string">"float"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">scale</span></span></div><div class="line">        <span class="attr">android:fromXScale</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:toXScale</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:fromYScale</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:toYScale</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:pivotX</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"float"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">translate</span></span></div><div class="line">        <span class="attr">android:fromXDelta</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:toXDelta</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:fromYDelta</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:toYDelta</span>=<span class="string">"float"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">rotate</span></span></div><div class="line">        <span class="attr">android:fromDegrees</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:toDegrees</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:pivotX</span>=<span class="string">"float"</span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"float"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>文件必须有一个唯一的根元素，可以是alpha,scale,translate,roate,或者是包含了其他动画元素（甚至嵌套的set元素）的一组（或多组）的set标签。</p>
<h5 id="元素：-1"><a href="#元素：-1" class="headerlink" title="元素："></a>元素：</h5><p>set:</p>
<p>包含其他动画元素（alpha，scale，translate，rotate）或其他set元素的容器。 表示AnimationSet。</p>
<p>属性：</p>
<p>android:interpolator</p>
<p>插值器资源。插值器应用于动画。它的值必须是对制定的插值器（不是插值器类名称）的资源的引用。平台提供了默认的插值器资源，或者可以创建自己的插值器资源。</p>
<p>android:shareInterpolator</p>
<p>布尔值。“true”表示在所有的子元素之间共享相同的插值器。</p>
<p>alpha:</p>
<p>淡入淡出动画，表示AlphaAnimation。</p>
<p>属性：</p>
<p>android:fromAlpha</p>
<p>float类型。开始透明度变化，其中0.0表示透明，1.0表示不透明。</p>
<p>android:toAlpha</p>
<p>float类型。结束透明度变化，其中0.0表示透明，1.0表示不透明。</p>
<p>对于alpha的更多属性，参阅Animation类引用。</p>
<p>scale:</p>
<p>调整大小的动画。可以通过pivotX和pivotY来制定图像伸缩的中心点。例如，指定值为0，0（左上角）， 所有的变换将会向右和向下。</p>
<p>属性：</p>
<p>android:fromXScale</p>
<p>float类型，变换的x坐标起始值，1.0表示未改变。</p>
<p>android:toXScale</p>
<p>float类型，变换的x坐标结束值，1.0表示为改变。</p>
<p>android:fromYScale</p>
<p>float类型，变换的y坐标起始值，1.0表示为改变。</p>
<p>android:toYScale</p>
<p>float类型，变换的y坐标结束值，1.0表示为改变。</p>
<p>android:pivotX</p>
<p>float类型，在缩放时固定不变的x坐标。</p>
<p>android:pivotY</p>
<p>float类型，在缩放时固定不变的y坐标。</p>
<p>translate：</p>
<p>垂直或水平的运动。支持以下三种格式的属性：</p>
<p>值以“％”结尾的-100到100，表示相对于自身的百分比; </p>
<p>值以“％p”结尾的-100到100，表示相对于其父代的百分比;</p>
<p> 没有后缀的浮点值，表示绝对值。</p>
<p>属性：</p>
<p>android:fromXDelta</p>
<p>float或百分比。x坐标起始值，表示：相对于正常位置（例如“5”）的像素，相对于元素宽度（例如“5％”）的百分比，或相对于父宽度的百分比（例如“5％p” ）。</p>
<p>android:toXDelta</p>
<p>float或百分比。x坐标结束值，表示：相对于正常位置（例如“5”）的像素，相对于元素宽度（例如“5％”）的百分比，或相对于父宽度的百分比（例如“5％p” ）。</p>
<p>android:fromXDelta</p>
<p>float或百分比。y坐标起始值，表示：相对于正常位置（例如“5”）的像素，相对于元素宽度（例如“5％”）的百分比，或相对于父宽度的百分比（例如“5％p” ）。</p>
<p>android:toXDelta</p>
<p>float或百分比。y坐标结束值，表示：相对于正常位置（例如“5”）的像素，相对于元素宽度（例如“5％”）的百分比，或相对于父宽度的百分比（例如“5％p” ）。</p>
<p>rotate：</p>
<p>旋转动画。</p>
<p>属性:</p>
<p>android:fromDegrees</p>
<p>float,起始角度位置，以度为单位。</p>
<p>android:toDegrees</p>
<p>float,结束角度位置，以度为单位。</p>
<p>android:pivotX</p>
<p>浮动或百分比。 旋转中心的X坐标。 表示为：相对于对象左边缘的像素（例如“5”），相对于对象左边缘的百分比（例如“5％”）或相对于父容器的左边缘的百分比（例如“ 5％p“）。</p>
<p>android:pivotY</p>
<p>浮动或百分比。 旋转中心的Y坐标。 表示为：相对于对象的顶部边缘（例如“5”）的像素，相对于对象的顶部边缘的百分比（例如“5％”）或相对于父容器的顶部边缘的百分比（例如“ 5％p“）。</p>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shareInterpolator</span>=<span class="string">"false"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">scale</span></span></div><div class="line">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_decelerate_interpolator"</span></div><div class="line">        <span class="attr">android:fromXScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:toXScale</span>=<span class="string">"1.4"</span></div><div class="line">        <span class="attr">android:fromYScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:toYScale</span>=<span class="string">"0.6"</span></div><div class="line">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">android:fillAfter</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"700"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">set</span></span></div><div class="line">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span></div><div class="line">        <span class="attr">android:startOffset</span>=<span class="string">"700"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">scale</span></span></div><div class="line">            <span class="attr">android:fromXScale</span>=<span class="string">"1.4"</span></div><div class="line">            <span class="attr">android:toXScale</span>=<span class="string">"0.0"</span></div><div class="line">            <span class="attr">android:fromYScale</span>=<span class="string">"0.6"</span></div><div class="line">            <span class="attr">android:toYScale</span>=<span class="string">"0.0"</span></div><div class="line">            <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">            <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">            <span class="attr">android:duration</span>=<span class="string">"400"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">rotate</span></span></div><div class="line">            <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:toDegrees</span>=<span class="string">"-45"</span></div><div class="line">            <span class="attr">android:toYScale</span>=<span class="string">"0.0"</span></div><div class="line">            <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">            <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">            <span class="attr">android:duration</span>=<span class="string">"400"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面代码将动画应用于ImageView，并启动动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImageView image = (ImageView) findViewById(R.id.image);</div><div class="line">Animation hyperspaceJump = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.hyperspace_jump);</div><div class="line">image.startAnimation(hyperspaceJump);</div></pre></td></tr></table></figure>
<h4 id="插值器"><a href="#插值器" class="headerlink" title="插值器"></a>插值器</h4><p>插值器是定义在xml中的动画修改器，它可以改变动画的效果。它可以使得现有的动画效果加速，减速，重复和反弹等。</p>
<p>插值器通过动画元素的android:interpolator属性被应用，该属性的值是对插值器资源的引用。</p>
<p>在Android中所有可以使用的插值器都是Interpolator的子类。Android系统中提供了一个公共插值器资源，可以为动画的android：interpolator属性引用该资源。下表指定了每个插值器使用的资源：</p>
<table>
<thead>
<tr>
<th>Interpolator class</th>
<th>Resource ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>AccelerateDecelerateInterpolator</td>
<td>@android:anim/accelerate_decelerate_interpolator</td>
</tr>
<tr>
<td>AccelerateInterpolator</td>
<td>@android:anim/accelerate_interpolato</td>
</tr>
<tr>
<td>AnticipateInterpolator</td>
<td>@android:anim/anticipate_interpolator</td>
</tr>
<tr>
<td>AnticipateOvershootInterpolator</td>
<td>@android:anim/anticipate_overshoot_interpolator</td>
</tr>
<tr>
<td>BounceInterpolator</td>
<td>@android:anim/bounce_interpolator</td>
</tr>
<tr>
<td>CycleInterpolator</td>
<td>@android:anim/cycle_interpolator</td>
</tr>
<tr>
<td>DecelerateInterpolator</td>
<td>@android:anim/decelerate_interpolator</td>
</tr>
<tr>
<td>LinearInterpolator</td>
<td>@android:anim/linear_interpolator</td>
</tr>
<tr>
<td>OvershootInterpolator</td>
<td>@android:anim/overshoot_interpolator</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="自定义插值器"><a href="#自定义插值器" class="headerlink" title="自定义插值器"></a>自定义插值器</h4><p>如果对于提供的插值器不满意，可以自己创建修改属性的自定义插值器资源。为此，您需要在XML文件中创建自己的插值器资源。</p>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">InterpolatorName</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:attribute_name</span>=<span class="string">"value"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<p>如果没有设置任何的属性，则插值器与原有的功能完全相同。</p>
<p>元素：</p>
<p>请注意，每个Interpolator实现在XML中定义时，以小写开头其名称。</p>
<p>accelerateDecelerateInterpolator：</p>
<p>在动画的开始和结束时速度缓慢，动画中间部分速度提高。没有属性。</p>
<p>accelerateInterpolator：</p>
<p>变化开始速度慢，然后开始加速。android:factor ：加速度（默认1）float</p>
<p>anticipateInterpolator:</p>
<p>变化开始时向后，然后向前。android:tension ：应用的张力（默认值为2）float</p>
<p>anticipateOvershootInterpolator：</p>
<p>变化开始时向后，然后向前并超过目标值，然后稳定在最终值。</p>
<ul>
<li>android:tension ：应用的张力（默认值为2）float。</li>
<li>android:extraTension ： 乘以张力的值（默认1.5）float。</li>
</ul>
<p>bounceInterpolator：</p>
<p>在变化的结束时反弹。</p>
<p>cycleInterpolator：</p>
<p>指定重复动画的周期数。 变化率遵循正弦模式。android:cycles：重复次数（默认1）Integer</p>
<p>decelerateInterpolator:</p>
<p>变化开始时快速，然后开始减速。android:factor ：减速率（默认1）float</p>
<p>linearInterpolator：</p>
<p>恒定的线性变化。</p>
<p>overshootInterpolator：</p>
<p>该变化向前超过最大的值，然后返回。android:tension ：张力值（默认值为2）float</p>
<p>例子：res/anim/my_overshoot_interpolator.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">overshootInterpolator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:tension</span>=<span class="string">"7.0"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">scale</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:interpolator</span>=<span class="string">"@anim/my_overshoot_interpolator"</span></div><div class="line">    <span class="attr">android:fromXScale</span>=<span class="string">"1.0"</span></div><div class="line">    <span class="attr">android:toXScale</span>=<span class="string">"3.0"</span></div><div class="line">    <span class="attr">android:fromYScale</span>=<span class="string">"1.0"</span></div><div class="line">    <span class="attr">android:toYScale</span>=<span class="string">"3.0"</span></div><div class="line">    <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">    <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"700"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h4><p>在XML中定义的动画，按顺序显示一系列图像（如电影）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:oneshot</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:drawable</span>=<span class="string">"@[package:]drawable/drawable_resource_name"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"integer"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>
<p>animation-list：</p>
<p>必须的根元素。 包含一个或多个item元素。</p>
<ul>
<li>android:oneshot ：布尔值。true表示动画执行一次，false表示循环动画。</li>
</ul>
<p>item：</p>
<p>单帧动画。 必须是animation-list元素的子元素。</p>
<p>使用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/rocket_thrust1"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/rocket_thrust2"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/rocket_thrust3"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mageView rocketImage = (ImageView) findViewById(R.id.rocket_image);</div><div class="line">rocketImage.setBackgroundResource(R.drawable.rocket_thrust);</div><div class="line"></div><div class="line">rocketAnimation = (AnimationDrawable) rocketImage.getBackground();</div><div class="line">rocketAnimation.start();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android动画分为三种：属性动画，补间动画，帧动画。本篇文章是对Android官方文档中关于动画资源一文的翻译学习，介绍了三种动画资源的的相关属性，xml的编写和引用。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android系统架构</title>
    <link href="http://yoursite.com/2017/01/11/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2017/01/11/Android系统架构/</id>
    <published>2017-01-11T01:35:43.000Z</published>
    <updated>2017-07-04T10:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基于Android官方文档学习翻译。"><a href="#基于Android官方文档学习翻译。" class="headerlink" title="基于Android官方文档学习翻译。"></a>基于Android官方文档学习翻译。</h5><p>Android是一个基于Linux的开源系统，适用于各种外形的设备。本篇文章翻译自官方文档介绍了Android系统的整体架构。<br><a id="more"></a></p>
<p>下图显示了Android平台的主要组件：</p>
<p><img src="https://developer.android.google.cn/guide/platform/images/android-stack_2x.png" alt=""></p>
<h4 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h4><p>​    Android系统的底层是依赖于Linux内核。例如，Android运行环境（ART）依赖于Linux内核的底层功能，如线程和底层内存的管理。</p>
<p>​    Linux内核允许Android使用重要的安全特性，并允许设备制造商为一个知名的内核开发硬件驱动程序。</p>
<h4 id="硬件抽象层（HAL）"><a href="#硬件抽象层（HAL）" class="headerlink" title="硬件抽象层（HAL）"></a>硬件抽象层（HAL）</h4><p>​    硬件抽象层（HAL）提供了将设备硬件功能暴露给更高级别的Java API框架的标准接口。 HAL由多个库模块组成，每个库模块实现用于特定类型的硬件组件（例如相机或蓝牙模块）的接口。 当框架API被调用访问设备硬件时，Android系统将加载该硬件组件的库模块。</p>
<h4 id="Android运行环境"><a href="#Android运行环境" class="headerlink" title="Android运行环境"></a>Android运行环境</h4><p>​    对于运行Android版本5.0（API level 21）或者更高版本的设备，每个应用程序都运行在其自己的进程里，同时拥有自己的Android运行环境实例。ART被用来在低内存设备上执行DEX文件运行在多个虚拟机中而编写的，DEX文件是专为Android设计的专为最小内存占用而优化的字节码格式。构建工具链，如Jack，将Java源代码编译成DEX字节码，可以在Android平台上运行。</p>
<p>ART的一些主要特征包括：</p>
<ul>
<li>预先编译（AOT）和即时（JIT）编译</li>
<li>优化垃圾回收（GC）</li>
<li>更好的调试支持，包括专用的采样分析器，详细的诊断异常和崩溃报告，以及设置监视点以监视特定字段的能力</li>
</ul>
<p>​        在早于Android5.0版本（API 21）之前，Dalvik是Android的运行环境。如果你的应用程序可以很好的运ART上，那么他应该也可以在Dalvik上很好的运行，但是反之则不然。</p>
<h4 id="C-C-原生本地库"><a href="#C-C-原生本地库" class="headerlink" title="C/C++原生本地库"></a>C/C++原生本地库</h4><p>​    许多Android系统组件和服务的核心，例如ART和HAL，都是使用C/C++的本地库代码构建的。Android平台提供了一些Java框架的API，用来向应用程序公开一些本地库的功能。例如，你可以通过Android的Java OpenGL API框架来访问OpenGL ES，从而支持应用程序对2D和3D图形的绘制和操作。</p>
<p>​    如果你正在开发需要C/C++代码的应用程序，你可以使用Android NDK从你的C/C++代码来访问这些本地平台库。</p>
<h4 id="Java-API-框架"><a href="#Java-API-框架" class="headerlink" title="Java API 框架"></a>Java API 框架</h4><p>​    您可以通过以Java语言编写的API来使用Android操作系统的整个功能集。这些API的建立是通过简化核心的重用，模块化的系统组件和服务，其中包括以下内容来创建Android应用的基石：</p>
<ul>
<li>丰富且可扩展的View系统，可用于构建应用程序的UI，包括列表，网格，文本框，按钮，甚至可嵌入式Web浏览器</li>
<li>资源管理器，提供对非代码资源（如本地化字符串，图形和布局文件）的访问</li>
<li>通知管理器，可让所有应用在状态栏中显示自定义提醒</li>
<li>一个Activity Manager，用于管理应用程序的生命周期，并提供通用的导航返回堆栈</li>
<li>Content Providers（内容提供者），可让应用程序访问其他应用程序（例如联系人）的资料，或是分享自己的资料</li>
</ul>
<p>开发人员完全可以通过访问标准的API框架来使用Android系统应用。</p>
<h4 id="系统应用程序"><a href="#系统应用程序" class="headerlink" title="系统应用程序"></a>系统应用程序</h4><p>​    Android提供了一套核心应用程序，用于电子邮件，短信，日历，互联网浏览，联系人等。 该平台附带的应用在用户选择安装的应用之间没有特殊状态。 因此，第三方应用程序可以成为用户的默认网络浏览器，短信通讯录，甚至默认键盘（有些例外情况，例如系统的设置）。</p>
<p>​    系统应用程序既可以作为用户的应用程序，也可以提供开发人员可以从自己的应用程序访问的关键功能。 例如，如果您的应用想要发送短信，则不需要自行构建该功能，您可以调用已安装的任何短信应用，向您指定的收件人发送短信。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;基于Android官方文档学习翻译。&quot;&gt;&lt;a href=&quot;#基于Android官方文档学习翻译。&quot; class=&quot;headerlink&quot; title=&quot;基于Android官方文档学习翻译。&quot;&gt;&lt;/a&gt;基于Android官方文档学习翻译。&lt;/h5&gt;&lt;p&gt;Android是一个基于Linux的开源系统，适用于各种外形的设备。本篇文章翻译自官方文档介绍了Android系统的整体架构。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
